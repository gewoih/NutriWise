// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NutriWise.Infrastructure.Database;

#nullable disable

namespace NutriWise.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241021074155_Identity_Added")]
    partial class Identity_Added
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AllergyUserProfile", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserProfilesId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "UserProfilesId");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("AllergyUserProfile");
                });

            modelBuilder.Entity("KitchenEquipmentUserProfile", b =>
                {
                    b.Property<Guid>("KitchenEquipmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserProfilesId")
                        .HasColumnType("uuid");

                    b.HasKey("KitchenEquipmentsId", "UserProfilesId");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("KitchenEquipmentUserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.Product.FoodCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FoodCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5c7320c-b3ad-4c67-9e44-1dc57952f9ae"),
                            Name = "Fruits"
                        },
                        new
                        {
                            Id = new Guid("c9ae85d8-b441-4199-a01f-777c1ae0e16d"),
                            Name = "Vegetables"
                        },
                        new
                        {
                            Id = new Guid("2359fde8-9c0b-4b4b-9892-2a4309688b12"),
                            Name = "Meats"
                        },
                        new
                        {
                            Id = new Guid("812a9f16-268a-4087-997a-478dcdaabda6"),
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = new Guid("303667df-67ec-4234-aa96-af33c9140f0b"),
                            Name = "Grains and Legumes"
                        },
                        new
                        {
                            Id = new Guid("cb72317a-733f-41ec-9760-9b7e535ea7c9"),
                            Name = "Nuts and Seeds"
                        },
                        new
                        {
                            Id = new Guid("d3621cc3-deb1-478c-b068-116a4fa2f0ac"),
                            Name = "Oils and Fats"
                        },
                        new
                        {
                            Id = new Guid("2d69098c-0694-4fcc-ae1f-352e6a8ceb47"),
                            Name = "Herbs and Spices"
                        },
                        new
                        {
                            Id = new Guid("c40385c1-4365-4bba-ac67-2125e99aa9d3"),
                            Name = "Baking Ingredients"
                        });
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.Product.FoodSubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("FoodSubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b8eb8eb-2496-49ce-b125-3ae8410fad34"),
                            CategoryId = new Guid("d5c7320c-b3ad-4c67-9e44-1dc57952f9ae"),
                            Name = "Citrus Fruits"
                        },
                        new
                        {
                            Id = new Guid("0acf5173-c234-4051-80d6-de00e90f42c2"),
                            CategoryId = new Guid("d5c7320c-b3ad-4c67-9e44-1dc57952f9ae"),
                            Name = "Berries"
                        },
                        new
                        {
                            Id = new Guid("27daeb22-1ba7-429b-b4f2-8ea8ed22c408"),
                            CategoryId = new Guid("d5c7320c-b3ad-4c67-9e44-1dc57952f9ae"),
                            Name = "Stone Fruits"
                        },
                        new
                        {
                            Id = new Guid("30d103a6-9356-424b-a8f6-e862236a8fd0"),
                            CategoryId = new Guid("d5c7320c-b3ad-4c67-9e44-1dc57952f9ae"),
                            Name = "Tropical Fruits"
                        },
                        new
                        {
                            Id = new Guid("3fb20cd4-3b7f-4651-ba5a-5cc15e4b72f7"),
                            CategoryId = new Guid("d5c7320c-b3ad-4c67-9e44-1dc57952f9ae"),
                            Name = "Pome Fruits"
                        },
                        new
                        {
                            Id = new Guid("bf48413d-15bb-4a8f-98c8-3bded3b3fe3b"),
                            CategoryId = new Guid("d5c7320c-b3ad-4c67-9e44-1dc57952f9ae"),
                            Name = "Melons"
                        },
                        new
                        {
                            Id = new Guid("38b07a82-b813-4d83-8abe-46642df44867"),
                            CategoryId = new Guid("d5c7320c-b3ad-4c67-9e44-1dc57952f9ae"),
                            Name = "Dried Fruits"
                        },
                        new
                        {
                            Id = new Guid("f1103175-a80b-4ea4-9b2c-136541d0384e"),
                            CategoryId = new Guid("c9ae85d8-b441-4199-a01f-777c1ae0e16d"),
                            Name = "Leafy Greens"
                        },
                        new
                        {
                            Id = new Guid("81da61f4-0654-4d95-af14-abbd14d20951"),
                            CategoryId = new Guid("c9ae85d8-b441-4199-a01f-777c1ae0e16d"),
                            Name = "Cruciferous Vegetables"
                        },
                        new
                        {
                            Id = new Guid("85ec0e49-d7cb-4a8d-a2f7-0bbd32555aca"),
                            CategoryId = new Guid("c9ae85d8-b441-4199-a01f-777c1ae0e16d"),
                            Name = "Root Vegetables"
                        },
                        new
                        {
                            Id = new Guid("7da73681-82fe-4ca4-b7fb-096563b15bbd"),
                            CategoryId = new Guid("c9ae85d8-b441-4199-a01f-777c1ae0e16d"),
                            Name = "Allium Vegetables"
                        },
                        new
                        {
                            Id = new Guid("2dc27ae3-3505-418f-9b2d-4152ac066086"),
                            CategoryId = new Guid("c9ae85d8-b441-4199-a01f-777c1ae0e16d"),
                            Name = "Squash Vegetables"
                        },
                        new
                        {
                            Id = new Guid("5ae538fe-2a67-454d-95f8-ef6158f44b51"),
                            CategoryId = new Guid("c9ae85d8-b441-4199-a01f-777c1ae0e16d"),
                            Name = "Nightshades"
                        },
                        new
                        {
                            Id = new Guid("45dc585d-65b0-4839-ae66-4f6fcf87749b"),
                            CategoryId = new Guid("2359fde8-9c0b-4b4b-9892-2a4309688b12"),
                            Name = "Beef"
                        },
                        new
                        {
                            Id = new Guid("de0551ee-0d70-4a32-ab80-abdf6acb0990"),
                            CategoryId = new Guid("2359fde8-9c0b-4b4b-9892-2a4309688b12"),
                            Name = "Pork"
                        },
                        new
                        {
                            Id = new Guid("fada0c45-3f76-4137-a716-47d2564aa6be"),
                            CategoryId = new Guid("2359fde8-9c0b-4b4b-9892-2a4309688b12"),
                            Name = "Poultry"
                        },
                        new
                        {
                            Id = new Guid("0873c235-35a3-486a-9f22-26c218b9835b"),
                            CategoryId = new Guid("2359fde8-9c0b-4b4b-9892-2a4309688b12"),
                            Name = "Fish"
                        },
                        new
                        {
                            Id = new Guid("519cf1ff-d892-41f7-b16f-4021a4e083b8"),
                            CategoryId = new Guid("2359fde8-9c0b-4b4b-9892-2a4309688b12"),
                            Name = "Shellfish"
                        },
                        new
                        {
                            Id = new Guid("eb947b74-5804-4433-9220-9f8ad2a02104"),
                            CategoryId = new Guid("812a9f16-268a-4087-997a-478dcdaabda6"),
                            Name = "Cheese"
                        },
                        new
                        {
                            Id = new Guid("15a8d309-f540-4a55-813d-b71372948a88"),
                            CategoryId = new Guid("812a9f16-268a-4087-997a-478dcdaabda6"),
                            Name = "Milk"
                        },
                        new
                        {
                            Id = new Guid("802ff61b-d76e-4b2b-9dc4-7e2059e3c530"),
                            CategoryId = new Guid("812a9f16-268a-4087-997a-478dcdaabda6"),
                            Name = "Other Dairy"
                        },
                        new
                        {
                            Id = new Guid("e120d296-27d6-4d5d-af04-86de6b04320f"),
                            CategoryId = new Guid("303667df-67ec-4234-aa96-af33c9140f0b"),
                            Name = "Rice"
                        },
                        new
                        {
                            Id = new Guid("cb62d76d-e302-471b-83bc-b6f491cb9b8d"),
                            CategoryId = new Guid("303667df-67ec-4234-aa96-af33c9140f0b"),
                            Name = "Other Grains"
                        },
                        new
                        {
                            Id = new Guid("43599cd4-b3ca-49fd-9d49-88ed7af95a46"),
                            CategoryId = new Guid("303667df-67ec-4234-aa96-af33c9140f0b"),
                            Name = "Pasta"
                        },
                        new
                        {
                            Id = new Guid("108d3aa5-9980-4a5d-bcf3-d14dedd1ae8a"),
                            CategoryId = new Guid("303667df-67ec-4234-aa96-af33c9140f0b"),
                            Name = "Legumes"
                        },
                        new
                        {
                            Id = new Guid("85abf512-c7f8-4f75-9307-f8042f642002"),
                            CategoryId = new Guid("cb72317a-733f-41ec-9760-9b7e535ea7c9"),
                            Name = "Nuts"
                        },
                        new
                        {
                            Id = new Guid("da77506c-7544-48c7-9383-09e0fbe67738"),
                            CategoryId = new Guid("cb72317a-733f-41ec-9760-9b7e535ea7c9"),
                            Name = "Seeds"
                        },
                        new
                        {
                            Id = new Guid("bd4c104b-bb4d-482d-be08-f8962f2a4ab7"),
                            CategoryId = new Guid("d3621cc3-deb1-478c-b068-116a4fa2f0ac"),
                            Name = "Oils"
                        },
                        new
                        {
                            Id = new Guid("ac35aa10-44da-4d0b-9068-68b4a640bfbe"),
                            CategoryId = new Guid("2d69098c-0694-4fcc-ae1f-352e6a8ceb47"),
                            Name = "Herbs"
                        },
                        new
                        {
                            Id = new Guid("49aa5cc5-01f2-4f38-b50b-d90e4059bf09"),
                            CategoryId = new Guid("2d69098c-0694-4fcc-ae1f-352e6a8ceb47"),
                            Name = "Spices"
                        },
                        new
                        {
                            Id = new Guid("d226a4ba-80cb-4584-9f9c-806ec9f32e58"),
                            CategoryId = new Guid("c40385c1-4365-4bba-ac67-2125e99aa9d3"),
                            Name = "Sugars"
                        },
                        new
                        {
                            Id = new Guid("2e15c75f-92c1-4d8e-a3b4-af37bdc0212c"),
                            CategoryId = new Guid("c40385c1-4365-4bba-ac67-2125e99aa9d3"),
                            Name = "Baking Ingredients"
                        });
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.Product.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Calories")
                        .HasColumnType("double precision");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Fats")
                        .HasColumnType("double precision");

                    b.Property<Guid>("FoodSubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Proteins")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FoodSubCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.Recipe.FoodRecipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("CookingInstructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.Recipe.RecipeIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FoodRecipeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MeasurmentType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FoodRecipeId");

                    b.HasIndex("ProductId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.UserProfile.Allergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6a520c8-01d5-43a0-85b6-918fde1c2b82"),
                            Name = "Gluten"
                        },
                        new
                        {
                            Id = new Guid("6027a767-b04c-47f6-a79a-bc0ece0eb8a2"),
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = new Guid("afaac70d-8581-49cb-86bb-f6861d8d00c9"),
                            Name = "Peanuts"
                        },
                        new
                        {
                            Id = new Guid("a2115d27-52ad-41a8-a4d3-dceb4f57083c"),
                            Name = "Tree Nuts"
                        },
                        new
                        {
                            Id = new Guid("e61d54f6-6049-4a18-8bd4-4c190b657052"),
                            Name = "Eggs"
                        },
                        new
                        {
                            Id = new Guid("6cabbc47-e9d4-413a-a5d6-4c29c223f996"),
                            Name = "Shellfish"
                        },
                        new
                        {
                            Id = new Guid("3c9a5706-ba6d-42d0-9e92-c69401842620"),
                            Name = "Fish"
                        },
                        new
                        {
                            Id = new Guid("06a506c3-cb8c-41a2-8e84-915703a87747"),
                            Name = "Soy"
                        },
                        new
                        {
                            Id = new Guid("6ae1e191-6b02-4b3d-b94c-749dcf86fd44"),
                            Name = "Wheat"
                        },
                        new
                        {
                            Id = new Guid("7d999f26-3cc4-4065-bb66-be7594784687"),
                            Name = "Sesame"
                        });
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.UserProfile.KitchenEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("KitchenEquipments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("206bef1e-950e-437b-b02b-ea86a6ae972a"),
                            Name = "Blender"
                        },
                        new
                        {
                            Id = new Guid("c726f977-e3c6-42a6-9fe1-55b74221e5cc"),
                            Name = "Oven"
                        },
                        new
                        {
                            Id = new Guid("dc0b8b15-0f2f-4e42-973e-1edf95c0325f"),
                            Name = "Microwave"
                        },
                        new
                        {
                            Id = new Guid("a1c84707-db4b-46c4-9321-a928ae67ce63"),
                            Name = "Air Fryer"
                        },
                        new
                        {
                            Id = new Guid("1d069d73-0c1b-42ae-aa49-2cc0860248a3"),
                            Name = "Food Processor"
                        },
                        new
                        {
                            Id = new Guid("730a74b1-67af-413f-b908-9e71e5a71058"),
                            Name = "Grill"
                        },
                        new
                        {
                            Id = new Guid("06f67933-7537-4e2f-a673-19af1a55655b"),
                            Name = "Stove"
                        },
                        new
                        {
                            Id = new Guid("d00938b5-c95e-41ed-b819-bd748fe96c74"),
                            Name = "Slow Cooker"
                        },
                        new
                        {
                            Id = new Guid("2010bfc4-139a-499b-80ac-9e5bc2c4bf02"),
                            Name = "Pressure Cooker"
                        },
                        new
                        {
                            Id = new Guid("c5c5d973-c7ce-4903-ae34-760e5704bffe"),
                            Name = "Toaster"
                        },
                        new
                        {
                            Id = new Guid("edd3d340-2c94-4224-afd4-a57ea31901ac"),
                            Name = "Rice Cooker"
                        },
                        new
                        {
                            Id = new Guid("1b2dbf44-07cf-4377-aa56-8e4541841b1e"),
                            Name = "Mixer"
                        });
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.UserProfile.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ActivityLevel")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("BirthdayDate")
                        .HasColumnType("date");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DietGoalType")
                        .HasColumnType("integer");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("AllergyUserProfile", b =>
                {
                    b.HasOne("NutriWise.Domain.Entities.UserProfile.Allergy", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutriWise.Domain.Entities.UserProfile.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KitchenEquipmentUserProfile", b =>
                {
                    b.HasOne("NutriWise.Domain.Entities.UserProfile.KitchenEquipment", null)
                        .WithMany()
                        .HasForeignKey("KitchenEquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutriWise.Domain.Entities.UserProfile.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("NutriWise.Domain.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("NutriWise.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("NutriWise.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("NutriWise.Domain.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutriWise.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("NutriWise.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.Product.FoodSubCategory", b =>
                {
                    b.HasOne("NutriWise.Domain.Entities.Product.FoodCategory", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.Product.Product", b =>
                {
                    b.HasOne("NutriWise.Domain.Entities.Product.FoodSubCategory", "FoodSubCategory")
                        .WithMany()
                        .HasForeignKey("FoodSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodSubCategory");
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.Recipe.RecipeIngredient", b =>
                {
                    b.HasOne("NutriWise.Domain.Entities.Recipe.FoodRecipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("FoodRecipeId");

                    b.HasOne("NutriWise.Domain.Entities.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.UserProfile.UserProfile", b =>
                {
                    b.HasOne("NutriWise.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.Product.FoodCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("NutriWise.Domain.Entities.Recipe.FoodRecipe", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
